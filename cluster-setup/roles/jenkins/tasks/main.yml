---

- name: Enable firewalld
  service: name=firewalld state=started enabled=yes

- name: Open firewalld 8080 port
  firewalld:
    port: 8080/tcp
    permanent: true
    state: enabled
  notify:
    - reload firewalld

- name: Ensure Git is installed
  package:
    name: git
    state: present

- name: Ensure Jenkins repo is installed
  get_url:
    url: "{{ jenkins_repo_url }}"
    dest: /etc/yum.repos.d/jenkins.repo

- name: Add Jenkins repo GPG key
  rpm_key:
    state: present
    key: "{{ jenkins_repo_key_url }}"

- name: Ensure Jenkins is installed
  package:
    name: jenkins
    state: "{{ jenkins_package_state }}"

- name: Configure Jenkins init settings
  include_tasks: settings.yml

- name: Ensure Jenkins is started and runs on startup
  service: name=jenkins state=started enabled=yes

- name: Wait for Jenkins to start up before proceeding.
  shell: "curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  check_mode: no

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10
  check_mode: no

- name: Remove Jenkins security init scripts after first startup.
  file:
    path: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    state: absent

- name: Update Jenkins and install configured plugins
  include_tasks: plugins.yml

- name: Ensure docker users are added to the docker group
  user:
    name: jenkins
    groups: docker
    append: yes
